#include <pbc.h>
#include <pbc_test.h>

int main(int argc, char **argv)
{
pairing_t pairing;
pbc_demo_pairing_init(pairing, argc, argv);
if (!pairing_is_symmetric(pairing)) pbc_die("pairing must be symmetric");

int n=5; // n is the number of users in the group
element_t A[n],X[n],gsk[n][2],grt[n],gpk[3],Y,W,temp2,temp3;
int i;
//gpk[0][1][2]: g1,g2,w
//gsk[0][1]:Ai [0][2]:xi
        element_t g1,g2;
    	element_init_G2(g2, pairing);
		element_init_G1(g1, pairing);
		element_random(g2);

        element_init_same_as(g1,g2);
		element_random(g1);
		element_printf("g1 %B\n", g1);
		element_printf("g2 %B\n", g2);

		element_init_Zr(Y, pairing);
		element_random(Y);
		element_printf("y %B\n", Y);

		element_init_G2(W, pairing);
		element_pow_zn(W,g2,Y);
		element_printf("w %B\n", W);

printf("Initialized");
		for(i=0;i<n;i++)
		{
			element_init_Zr(X[i], pairing);
			element_init_G1(A[i], pairing);
			element_init_G1(gsk[i][0], pairing);
			element_init_G1(gsk[i][1], pairing);
			element_init_G1(grt[i], pairing);
			element_init_G1(gpk[0], pairing);
			element_init_G1(gpk[1], pairing);
			element_init_G1(gpk[2], pairing);
		}

		element_init_Zr(temp2, pairing);
		element_init_Zr(temp3, pairing);
printf("Looping");
		for(i=0;i<n;i++)
			{
			    element_random(temp2);
				element_set(X[i],temp2);
				element_add(temp2,Y,temp2);
				printf("While");
				while((element_is0(temp2)))
					{
						element_random(temp2);
						element_add(temp2,Y,temp2);
					}
					element_set(X[i],temp2);
					printf("While done");
					element_printf("temp2 %B\n", temp2);
				element_invert(temp3,temp2);
				element_printf("temp3 %B\n", temp3);
				printf("Invreted");
				element_pow_zn(A[i],g1,temp3);
				element_printf("Ai %B\n", A[i]);

				element_set(gsk[i][0],A[i]);
				element_printf("gsk[i][0] %B\n", gsk[i][0]);

				element_set(gsk[i][1],X[i]);
				element_printf("gsk[i][1] %B\n", gsk[i][1]);
				element_set(grt[i],A[i]);
				element_printf("grt[i] %B\n", grt[i]);
			}
		element_set(gpk[0],g1);
		element_printf("gpk[0][1] %B\n", gpk[0]);
		element_set(gpk[1],g2);
		element_printf("gpk[1][1] %B\n", gpk[1]);
		element_set(gpk[2],W);
		element_printf("gpk[2][1] %B\n", gpk[2]);

}
